package com.solohouse.boxes.adapter.in.rest;

import com.solohouse.boxes.adapter.in.rest.model.PurchaseWebModel;
import com.solohouse.boxes.application.port.in.CreatePurchaseUseCase;
import com.solohouse.boxes.application.port.in.PickPurchaseUseCase;
import com.solohouse.boxes.model.Purchase;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import lombok.RequiredArgsConstructor;
import org.springframework.lang.NonNull;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/purchases")
@RequiredArgsConstructor
public class PurchaseController {

    private final CreatePurchaseUseCase createPurchaseUseCase;
    private final PickPurchaseUseCase pickPurchaseUseCase;
    private final PurchaseRestMapper purchaseRestMapper;

    @Operation(summary = "Purchase shirt",
            description = "Purchase a single shirt found in a particular box")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "201", description = "Purchase created"),
            @ApiResponse(responseCode = "400", description = "Unable to create desired purchase")
    })
    @PostMapping
    //TODO: user sent via header token with OAuth
    public Integer createPurchase(@RequestBody @NonNull final PurchaseWebModel request) {

        final Purchase purchase = this.purchaseRestMapper.map(request);
        return this.createPurchaseUseCase.createPurchase(purchase);
    }

    //TODO: should be a received kafka event generated by the box itself
    @Operation(summary = "Flag shirt as picked",
            description = "Flag shirt purchase as picked")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "201", description = "Flag added"),
            @ApiResponse(responseCode = "400", description = "Unable to add flag"),
            @ApiResponse(responseCode = "404", description = "Not found")
    })
    @PatchMapping("/{purchaseId}/picked")
    public void pickPurchase(@PathVariable("purchaseId") @NonNull final Integer purchaseId,
                             //TODO: user sent via header token with OAuth
                             @RequestParam("user") @NonNull final Integer userId) {

        this.pickPurchaseUseCase.pickPurchase(purchaseId, userId);
    }
}
